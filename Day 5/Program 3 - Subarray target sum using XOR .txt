// Present in interview bit 



int Solution::solve(vector<int> &A, int B) {
   unordered_map<int,int>m;
   int count = 0;
   long long prefix_xor =0;
   
   for(int i =0;i<A.size();i++)
   {
      prefix_xor ^=A[i];        // taking xor with every element
      if(prefix_xor == B) count++;        //if B found then increase
      int y = prefix_xor^B;               // if  y^prefix_xor = B  then finding how many    
      if(m.find(y)!=m.end()) count=count+m[y];     //if y present then its meaning using this we can make subarray  
      m[prefix_xor]++;                             // increasing the preifx_xor found
   }

    return count;
}
