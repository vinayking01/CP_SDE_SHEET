// { Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


 // } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    
    bool static comparison(Job a, Job b) {
         if(a.profit > b.profit) return true;
         return false;
      }
    
    vector<int> JobScheduling(Job arr[], int n) 
    { 
            sort(arr,arr+n,comparison);
            int maxi =0;   
            for(int i=0;i<n;i++)
            {
             maxi = max(arr[i].dead,maxi);   // finding the maximum deadline
            }
            int count=0;
            vector<int> temp(maxi+1,-1);
            vector<int> ans(2,0);
            int total_profit=0;
            
            
            for(int i =0;i<n;i++)
            {
                for(int j = arr[i].dead ; j>0;j--)
                {
                    if(temp[j]==-1)                     //to identify that there is still free we can move one position back if place is not found free
                    {
                        temp[j] = arr[i].id;
                        count++;
                        total_profit = total_profit + arr[i].profit;
                        break;
                    }
                }
            }
            ans[0] = count;
            ans[1] = total_profit;
            
            return ans;
    } 
};

// { Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}


  // } Driver Code Ends