// { Driver Code Starts
#include <bits/stdc++.h>

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};

using namespace std;

void printList(Node *Node)
{
    while (Node != NULL)
    {
        printf("%d ", Node->data);
        Node = Node->bottom;
    }
}

Node* flatten (Node* root);

int main(void) {

	int t;
	cin>>t;
	while(t--){
    int n,m,flag=1,flag1=1;
    struct Node * temp=NULL;
	struct Node * head=NULL;
	struct Node * pre=NULL;
	struct Node * tempB=NULL;
	struct Node * preB=NULL;
		cin>>n;
        int work[n];
		for(int i=0;i<n;i++)
            cin>>work[i];
		for(int i=0;i<n;i++){
			m=work[i];
			--m;
			int data;
			scanf("%d",&data);
			temp = new Node(data);
			temp->next = NULL;
			temp->bottom = NULL;
			
			if(flag){
				head = temp;
				pre = temp;
				flag = 0;
				flag1 = 1;
			}
			else{
				pre->next = temp;
				pre = temp;
				flag1 = 1;
			}
			for(int j=0;j<m;j++){
				
				int temp_data;
				scanf("%d",&temp_data);
				tempB = new Node(temp_data);

				if(flag1){
					temp->bottom=tempB;
					preB=tempB;
					flag1=0;
				}
				else{
					preB->bottom=tempB;
					preB=tempB;
				}
			}
		}
		   Node *fun = head;
		   Node *fun2=head;

            Node* root = flatten(head);
            printList(root);
            cout<<endl;

	}
	return 0;
}
// } Driver Code Ends


/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
Node* merging(Node* list1,Node* list2)
{
     if(list1==NULL)
        {
            return list2;
        }
        if(list2==NULL)
        {
        return list1;
        }
        
        if(list1->data>list2->data)
        {
            swap(list1,list2);         // choosing the starting head of the linked list
        }
        Node*  merge_head = list1;    // storing it
        
        Node* temp = list1;    // t0 keep track of node chaning 
        while(list1!=NULL && list2!=NULL)
        {
            // ListNode* prev = NULL;
            while(list1!=NULL && list1->data<=list2->data)   // please keep in mind if you use list!= null after the tsecond adn opeartion then it will give error of address because it is first matching first coondition then second so use cleverly 
            {
                // prev = list1;
                // list1 = list1->next;
                temp = list1;
                list1 = list1->bottom;
                temp->bottom = list1;
            }
            temp->bottom = list2;         
            swap(list1,list2);           // changing head always to be point the minium no. always
        }
        return merge_head;
}
    
Node *flatten(Node *root)
{
   if(root==NULL || root->next==NULL)
   {
       return root;
   }
   
   Node * root1 = root;
   Node* root2 = flatten(root->next);
   
   return merging(root1,root2);
   
}

