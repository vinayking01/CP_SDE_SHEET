approach 1 - 


    void getallpath(int matrix[MAX][MAX], int n,int row,int col,vector<string> &ans,string cur)
    {
        if(row>=n or col>=n or row<0 or col<0 or matrix[row][col] == 0)
        return ;
        
        if(row == n-1 and col == n-1)
        {
            ans.push_back(cur);
            return ;
        }
        
        //now if its one we have 4 calls
        matrix[row][col] = 0;
        
        getallpath(matrix,n,row-1,col,ans,cur+"U");
        getallpath(matrix,n,row,col+1,ans,cur+"R");
        getallpath(matrix,n,row,col-1,ans,cur+"L");
        getallpath(matrix,n,row+1,col,ans,cur+"D");
        
        matrix[row][col] = 1;
        
        return ;
    }
    
vector<string> findPath(int matrix[MAX][MAX], int n) {
        // Your code goes here
        vector<string> ans;
        getallpath(matrix,n,0,0,ans,"");
        return ans;
    }



Approach -2 - binding this difeerent calling function for left , right, upwards, downwards into a single one loop 

// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    

    
    public:
      void getallpath(vector<vector<int>> & matrix, int n,int row,int col,vector<string> &ans,string cur,int di[],int dj[])
    {
        if(row<0 or col<0 or row>=n or col>=n or matrix[row][col]==0)
        {
            return;
        }
        if(row==n-1 && col == n-1)
        {
            ans.push_back(cur);
            return;
        }
        string s1= "DLRU";
        for(int i =0;i<=3;i++)
        {
            //   if(matrix[row][col]!=0)
            //   {
              matrix[row][col] = 0;   
              getallpath(matrix,n,row+di[i],col+dj[i],ans,cur+s1[i],di,dj);
              matrix[row][col] = 1;
            //   }
             

        }
        
        return ;
    }
    
  vector<string> findPath(vector<vector<int>> &matrix, int n){
        vector<string> ans;
        int di[] = {1,0,0,-1};
        int dj[] = {0,-1,1,0};
        getallpath(matrix,n,0,0,ans,"",di,dj);
        return ans;
    }    
    

};


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends