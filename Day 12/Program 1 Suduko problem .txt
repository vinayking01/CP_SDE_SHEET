class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) 
    {
        solve(board);
    }
    
    
    bool isvalid_number(vector<vector<char>>&board,int i ,int j,char A)
    {
        for(int k=0;k<9;k++)
        {
           if(board[i][k]==A)
           {
               return false;
           }
           if(board[k][j]==A)
           {
               return false;
           }
           if(board[3 * (i / 3) + k / 3][3 * (j / 3) + k % 3]==A)
           {
               return false;
           }
        
        }
        return true;
    }
    
    
    bool solve(vector<vector<char>>& board)
    {
        int r = board.size();
        int c = board[0].size();
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(board[i][j]=='.')
                {
                  for(char A = '1';A<='9';A++)
                    {
                        if(isvalid_number(board,i,j,A))
                            {    
                                board[i][j] = A;
                                // cout<<"enter"<<A<<endl;
                            
                            if(solve(board))
                                {
                                return true;
                                }
                            else
                                {
                                board[i][j]= '.';
                                }       
                    
                        }
                      
                  
                  }
                  return false;  
                    
                }
                
            }
            
            
        }
        
       return true; 
        
    }
    
    
    
};