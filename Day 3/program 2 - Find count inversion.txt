// Coding Ninjas


#include<bits/stdc++.h>
long long modifiedMerge(long long arr[], int low, int mid, int high)
{
    int i = low, j = mid, str=0;
    long long count_inversion=0;
    
    int arr2[(high-low+1)];   // creating temporary array every time
    
    while(i<mid || j<=high)    // this is added to merge both arrays till then end
    {
        if(i<mid && j<=high)    // this is for merging till then same size only after that upper condition will handle
        {
            if(arr[i] > (arr[j]))
            { 
                count_inversion+=(mid-i);    //if this condition is true meaning every element is greater then 1st element of right array 
                arr2[str++] = arr[j++]; 
//                 swap(arr2[str++],arr[j++]);
            }
            else arr2[str++]= arr[i++];   
        }
        else if(i<mid){ 
            arr2[str++] = arr[i++];    // entering remaining elements of left array
        }
        else{ 
            arr2[str++] = arr[j++];    // entering remainin glements of right array
        }
    }
    
    j = 0;
    for(int i=low;i<=high;i++) 
    {
        arr[i] = arr2[j++];      // storing in new array
    }
    
    return count_inversion;
}

long long preCall(long long arr[], int l, int r){
    long long ans=0;
    
    if(l<r){
        int mid = l + (r-l) / 2;
        ans = preCall(arr, l, mid); 
        ans += preCall(arr, mid+1, r);
        ans += modifiedMerge(arr, l, mid+1, r);
    }
    return ans;
}

long long getInversions(long long *arr, int n){
    return preCall(arr, 0, n-1);
}