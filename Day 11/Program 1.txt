class Solution {
public:
    void findcombination(int index,int target,vector<int>& candidates,vector<vector<int>>& ans,vector<int>& ms)
    {
        
          if(target == 0)
        {
         ans.push_back(ms);
         return; 
        }
        
        for(int i =index;i<candidates.size();i++)
        {
            if(i != index && candidates[i]==candidates[i-1]) continue;
            if(candidates[i]>target) return;                                 // to solve the issue of unneccessary addition of numbers 
            ms.push_back(candidates[i]);
            findcombination(i+1,target - candidates[i],candidates,ans,ms);
            ms.pop_back();
        }
        
    }
    
    
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> ms;
        findcombination(0,target,candidates,ans,ms);
        return ans;
    }    
};