class Solution {
public:
//     int strStr(string haystack, string needle) {
//         if(needle.size()==0)
//             return 0;
//         else if (needle.size()>haystack.size()){
//             return -1;            
//         }
//         for(int i =0;i<=haystack.size()-needle.size();i++)
//         {   int count= 0;
//             for(int j =0;j<needle.size();j++)
//             {
//                 if(needle[j]==haystack[i+j])
//                 {
//                     count++;
//                 }
//                 else
//                 {
//                     break;
//                 }
//             }
//             if(count==needle.size())
//             {
//                return i; 
//             }
        
//         }
//         return -1;
//     }
    
//T.C = o(n*m);
    
    
// optimal solution using kmp algortihm
    
vector<int> prefix_function(string s) {
int n = s.size();
vector<int> pi(n,0);
for(int i=1;i<n;i++)
{ int j = pi[i-1];
    while(j>0 && s[i]!=s[j])
    {
        j=pi[j-1];
    }
   if(s[i] == s[j])
   {j++;}
   pi[i] = j;
}
return pi;
}
    
int strStr(string haystack, string needle) {
  vector<int> res = prefix_function(needle);
  int k =0;
  for(int i=0,j=0;i<haystack.size() && j<needle.size();)
  {
      if(haystack[i]==needle[j])
      {
          j++;
          i++;
      }
      else
      {
          if(j!=0)
          {
              j = res[j-1];
          }
          else
          {
              i++;
          }
      }
      if(j==needle.size())
      {
          return i-j;
          break;
      }
  }
    return -1; 
      
  }
    
};