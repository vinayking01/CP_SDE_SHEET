/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     vector<int>p;
//     vector<int> postorderTraversal(TreeNode* root) {
//       if(root==NULL)
//       {
//       return p;  
//       }  
        
//         postorderTraversal(root->left);
//         postorderTraversal(root->right);
//         p.push_back(root->val);
//         return p; 
//     }
    
// };



// iterative approach  1st - Using two stack

#include<bits/stdc++.h>

class Solution {
public:
    vector<int>p;
    vector<int> postorderTraversal(TreeNode* root) {
      stack<TreeNode*> s1;
      stack<int>s2;
        TreeNode * temp;
      if(root==NULL)
          return p;
      s1.push(root);
      while(!s1.empty())
      { 
          temp = s1.top();
          s1.pop();
          if(temp->left !=NULL)
          {
            s1.push(temp->left);
          
          }
          if(temp->right!=NULL)
          {
             s1.push(temp->right);
          }
          s2.push(temp->val);
          
      }
        
       while(!s2.empty())
       {
           int value = s2.top();
           p.push_back(value);
           s2.pop();
       }
       return p; 
    }
    
};
